types = {
	type[sprite] = {
		# TODO PLS 1.3.8+ unsupported yet
		# path = "interface"
		# path = "dlc/*/interface"
		# path = "integrated_dlc/*/interface"

		path = "interface"
		path_extension = .gfx
		skip_root_key = spriteTypes
		name_field = "name"

		## type_key_filter = spriteType
		subtype[normal] = {}
		## type_key_filter = frameAnimatedSpriteType
		subtype[frame_animated_sprite] = { }
		## type_key_filter = corneredTileSpriteType
		subtype[cornered_tile_sprite] = { }
		## type_key_filter = maskedShieldType
		subtype[masked_shield] = { }
		## type_key_filter = textSpriteType
		subtype[text_sprite] = { }
		## type_key_filter = progressbartype
		subtype[progressbar] = { }
		## type_key_filter = circularProgressBarType
		subtype[circular_progressbar] = { }
		## type_key_filter = pieChartType
		subtype[pie_chart] = { }
		## type_key_filter = LineChartType
		subtype[line_chart] = { }

		images = {
			subtype[!masked_shield&!progressbar&!circular_progressbar&!pie_chart] = {
				## primary
				texture = textureFile # filepath
				## primary
				texture = sprite_sheet_sprite_type|default_frame # <sprite>
			}
			subtype[masked_shield] = {
				textureFile1 = textureFile1 # filepath
				textureFile2 = textureFile2 # filepath
			}
			subtype[progressbar] = {
				textureFile1 = textureFile1 # filepath
				textureFile2 = textureFile2 # filepath
			}
			subtype[circular_progressbar] = {
				textureFile1 = textureFile1 # filepath
				textureFile2 = textureFile2 # filepath
			}
		}
	}
}

spriteType = {
	name = scalar
	## cardinality = 0..1
	effectFile = scalar
	## cardinality = 0..1
	noOfFrames = int
	## cardinality = 0..1
	animation_rate_fps = float
	## cardinality = 0..1
	looping = bool
	## cardinality = 0..1
	play_on_show = bool
	## cardinality = 0..inf
	animation = {
		## cardinality = 0..1
		animationmaskfile = scalar
		## cardinality = 0..1
		animationtextureFile = scalar
		## cardinality = 0..1
		animationrotation = float
		## cardinality = 0..1
		animationlooping = bool
		## cardinality = 0..1
		animationtime = float
		## cardinality = 0..1
		animationdelay = float
		## cardinality = 0..1
		animationtype = scalar
		## cardinality = 0..1
		animationblendmode = scalar
		## cardinality = 0..1
		animationrotationoffset = { x = float y = float }
		## cardinality = 0..1
		animationtexturescale = { x = float y = float }
		## cardinality = 0..1
		animationframes = {
			## cardinality = 1..inf
			int
		}
	}
	## cardinality = 0..1
	loadType = scalar
	## cardinality = 0..1
	transparencecheck = bool
	## cardinality = 0..1
	legacy_lazy_load = bool
	## cardinality = 0..1
	pause_on_loop = float
	## cardinality = 0..1
	alwaystransparent = bool
	## cardinality = 0..1
	generate_mip_maps = bool
	subtype[normal] = {
		## file_extensions = { .dds .png .tga }
		textureFile = filepath
		clicksound = scalar #<soundeffect> does not properly check for voices and other misc sounds and soundefects in mods since those are dlc files
	}
	subtype[frame_animated_sprite] = {
		## file_extensions = { .dds .png .tga }
		textureFile = filepath
	}
	subtype[cornered_tile_sprite] = {
		## file_extensions = { .dds .png .tga }
		textureFile = filepath
		borderSize = { x = float y = float }
		## cardinality = 0..1
		tilingCenter = bool
		size = { x = float y = float }
		## cardinality = 0..1
		animation_rate_spf = int
		## cardinality = 0..1
		allwaystransparent = bool
	}
	subtype[masked_shield] = {
		textureFile1 = scalar
		textureFile2 = scalar
	}
	subtype[text_sprite] = {
		## file_extensions = { .dds .png .tga }
		textureFile = filepath
		## cardinality = 0..1
		clicksound = click
	}
	subtype[progressbar] = {
		textureFile1 = scalar
		textureFile2 = scalar
		size = { x = float y = float }
		horizontal = bool
		## color_type = hsv
		color = {
			## cardinality = 3..3
			float
		}
		## color_type = hsv
		colortwo = {
			## cardinality = 3..3
			float
		}
		steps = int
	}
	subtype[circular_progressbar] = {
		textureFile1 = scalar
		textureFile2 = scalar
		size = int
		rotation = int
		amount = int
	}
	subtype[pie_chart] = {
		size = int
	}
	subtype[line_chart] = {
		size = { x = int y = int }
		linewidth = float
	}
}
