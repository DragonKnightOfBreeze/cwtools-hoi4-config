
### Checks if country has specific balance of power.
## scope = country
alias[trigger:has_power_balance] = {
    id = <balance_of_power>
}

### Checks if country has any balance of power.
## scope = country
alias[trigger:has_any_power_balance] = bool

### Checks if country has balance of power modifier.
## scope = country
alias[trigger:has_power_balance_modifier] = {
    id = <balance_of_power>
    modifier = <static_modifier>
}

### Checks if BOP is in certain range.
## scope = country
alias[trigger:is_power_balance_in_range] = {
    id = <balance_of_power>
    range = value[bop_range_id]
}

### Checks if BOP is more or less than certain value (> <).
## scope = country
alias[trigger:power_balance_value] = {
    id = <balance_of_power>
    value = float[-1..1]
}

### Checks if BOP daily drift is more or less than certain value (> <).
## scope = country
alias[trigger:power_balance_daily_change] = {
    id = <balance_of_power>
    value = float[-1..1]
}

### Checks if BOP weekly drift is more or less than certain value (> <).
## scope = country
alias[trigger:power_balance_weekly_change] = {
    id = <balance_of_power>
    value = float[-1..1]
}

### Checks if country has specific balance of power side active.
## scope = country
alias[trigger:is_power_balance_side_active] = {
    id = <balance_of_power>
    side = value[bop_side]
}

### Check if division has this battalion as majority in template
## scope = unit
alias[trigger:division_has_majority_template] = <unit>

### Check if any division in country division has fullfils the triggers
## scope = country
## push_scope = unit
alias[trigger:any_country_division] = {
    ## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

## scope = state
## push_scope = unit
alias[trigger:any_state_division] = {
    ## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

### Check if division has this battalion in template
## scope = unit
alias[trigger:division_has_battalion_in_template] = <unit>

### Checks if states have divisions
## scope = country
alias[trigger:num_divisions_in_states] = {
    count = int
    states = {
        ## cardinality = ~1..inf
        <state>
    }
    ## cardinality = 0..1
    types = {
        ## cardinality = ~1..inf
        <unit>
    }
    ## cardinality = 0..1
    exclude = {
        ## cardinality = ~1..inf
        <unit>
    }
}

### Checks if states have divisions
## scope = country
alias[trigger:num_battalions_in_states] = {
    count = int
    states = {
        ## cardinality = ~1..inf
        <state>
    }
    ## cardinality = 0..1
    types = {
        ## cardinality = ~1..inf
        <unit>
    }
    ## cardinality = 0..1
    exclude = {
        ## cardinality = ~1..inf
        <unit>
    }
}

### Check if tag has war with major
## scope = country
alias[trigger:has_war_with_major] = bool

### Checks if there is a railway connection between provinces/states
## scope = country
alias[trigger:has_railway_connection] = {
	start_state = <state>
	target_state = <state>
}

### Checks if there is a railway connection between provinces/states
## scope = country
alias[trigger:has_railway_connection] = {
	start_province = enum[provinces]
	target_province = enum[provinces]
}

### Checks if country has war with wargoal against target
## scope = country
alias[trigger:has_war_with_wargoal_against] = {
	target = scope[country]
	target = enum[country_tags]
	type = <wargoal>
}

### Checks if country has war with any wargoal against target
## scope = country
alias[trigger:has_war_with_wargoal_against] = scope[country]

### Checks if country has war with any wargoal against target
## scope = country
alias[trigger:has_war_with_wargoal_against] = enum[country_tags]

## scope = { character unit_leader }
alias[trigger:is_hired_as_advisor] = bool

## scope = country
alias[trigger:has_completed_custom_achievement] = {
    mod = enum[mod_achievement_id]
    achievement = <achievement>
}

#during peace conference triggers country

### Checks if country is a winner in peace conference
## scope = country
alias[trigger:pc_is_winner] = bool

### Checks if the current scope is on the winning side within the peace conference. 
## scope = country
alias[trigger:pc_is_on_winning_side] = bool

### Checks if country is a loser in peace conference
## scope = country
alias[trigger:pc_is_loser] = bool

### Checks if the current scope is an untouched loser within the peace conference. 
## scope = country
alias[trigger:c_is_untouched_loser] = bool

### Checks if the current scope is on the same side of the peace conference as the specified country.
## scope = country
alias[trigger:pc_is_on_same_side_as] = enum[country_tags]
### Checks if the current scope is on the same side of the peace conference as the specified country.
## scope = country
alias[trigger:pc_is_on_same_side_as] = scope[country]

### Checks if the current scope has been liberated within the peace conference.
## scope = country
alias[trigger:pc_is_liberated] = bool

### Checks if the current scope has been liberated within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_liberated_by] = enum[country_tags]
### Checks if the current scope has been liberated within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_liberated_by] = scope[country]

### Checks if the current scope has been puppeted within the peace conference.
## scope = country
alias[trigger:pc_is_puppeted] = bool

### Checks if the current scope has been puppeted within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_puppeted_by] = enum[country_tags]
### Checks if the current scope has been puppeted within the peace conference by the specified country.
## scope = country
alias[trigger:pc_is_puppeted_by] = scope[country]

### Checks if the current scope has had an enforced government change within the peace conference.
## scope = country
alias[trigger:pc_is_forced_government] = bool

### Checks if the current scope has had an enforced government change within the peace conference demanded by the specified country.
## scope = country
alias[trigger:pc_is_forced_government_by] = enum[country_tags]
### Checks if the current scope has had an enforced government change within the peace conference demanded by the specified country.
## scope = country
alias[trigger:pc_is_forced_government_by] = scope[country]

### Checks if the current scope has had an enforced government change to the specified ideology group.
## scope = country
alias[trigger:pc_is_forced_government_to] = enum[country_tags]
### Checks if the current scope has had an enforced government change to the specified ideology group.
## scope = country
alias[trigger:pc_is_forced_government_to] = scope[country]

### Checks if the current scope has the specified amount in total score within the peace conference. 	Can only be used for the winning countries. 	1.12
## scope = country
alias[trigger:pc_total_score] = int

### Checks if the current scope has the specified amount in current score within the peace conference. 
## scope = country
alias[trigger:pc_current_score] = int

#post or during peace conference triggers state

### Checks if the current scope was demilitarised during a current or previously-ended peace conference.
## scope = state
alias[trigger:pc_does_state_stack_demilitarized] = bool

### Checks if the current scope was dismantled during a current or previously-ended peace conference.
## scope = state
alias[trigger:pc_does_state_stack_dismantled] = bool

#during peace conference triggers state

### Checks if the current scope was claimed by any country during the peace conference.
## scope = state
alias[trigger:pc_is_state_claimed] = bool

### Checks if the current scope was claimed by the specified country during the peace conference.
## scope = state
alias[trigger:pc_is_state_claimed_by] = scope[country]
### Checks if the current scope was claimed by the specified country during the peace conference.
## scope = state
alias[trigger:pc_is_state_outside_influence_for_winner] = enum[country_tags]

### Checks if the current state is outside of the influence of the specified winner country.
## scope = state
alias[trigger:pc_is_state_outside_influence_for_winner] = scope[country]
### Checks if the current state is outside of the influence of the specified winner country.
## scope = state
alias[trigger:pc_is_state_outside_influence_for_winner] = enum[country_tags]

### Compares the amount of turns that have passed during the peace conference with a number.
## scope = state
alias[trigger:pc_turn] = int