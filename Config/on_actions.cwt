on_actions = {
	# General on actions

	### Trigger the following commands at the first day of a new game, after country selection. Doesn't work with save loading.
	### Has a default scope of none, instead of firing for each country individually as in other Paradox games such as Europa Universalis IV.
	### Many effects that usually can be used in any scope will not work, without manual scoping into countries, states, or elsewhere.
	## replace_scopes = { this = any root = any from = any }
	## event_type = scopeless
	on_startup

	### Trigger the following commands when a country annex a subject. ROOT is the subject, FROM is the overlord.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_daily

	### Triggered daily for the specified country. Only runs the effects if the country exists. Tag isn't checked for validity
	## replace_scope = { this = country root = country }
	## event_type = country
	ant:on_daily_*

	### Triggers each week for every country separately. Useful for ai scripting. Runs on the beginning of the day if the num_days variable is divisible by 7.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_weekly

	### Triggered weekly for the specified country. Only runs the effects if the country exists. Runs on the beginning of the day if the num_days variable is divisible by 7. Tag isn't checked for validity
	## replace_scope = { this = country root = country }
	## event_type = country
	ant:on_weekly_*

	### Triggers each month for every country separately.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_monthly

	### Triggered monthly for the specified country. Only runs the effects if the country exists. Tag isn't checked for validity
	## replace_scope = { this = country root = country }
	## event_type = country
	ant:on_monthly_*

	# Political on actions

	### For the non LaR stage coup. ROOT is the country that stages the coup, FROM is the target country.
	## replace_scope = { this = state root = state from = country }
	## event_type = country
	on_stage_coup

	### For the non LaR stage coup action. Trigger the following commands whenever a coup succeeds. ROOT is the country that coup succeeded in, FROM is the stager of the coup
	## replace_scope = { this = country root = country }
	## event_type = country
	on_coup_succeeded

	### Trigger the following commands whenever a country switches its government.
	### This includes set_politics and start_civil_war (always for both sides) and excludes being puppeted. Will always also trigger on_ruling_party_change.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_government_change

	### Trigger the following commands whenever a country switches its ideology.
	### Happens only after all effects in the block that triggered it have been processed.
	### old_ideology_token is a temporary variable that stores the old ideology as a token. Alongside what triggers on_government_change, also includes being puppeted or changing the ideology via a console command.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_ruling_party_change

	### Trigger the following commands whenever a country switches its ideology.
	### Happens immediately after the effect that has triggered it.
	### old_ideology_token is a temporary variable that stores the old ideology as a token. Alongside what triggers on_government_change, also includes being puppeted or changing the ideology via a console command.
	## replace_scope = { this = country root = country }
	## event_type = country
	on_ruling_party_change_immediate

	### Trigger the following commands whenever an election happens or is called by the hold_election command.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_new_term_election

	### Trigger the following commands whenever a peace conference ends. ROOT is the winner, FROM is the loser.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_peaceconference_ended

	### Trigger the following commands whenever a peace conference starts. ROOT is the winner, FROM is the loser.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_peaceconference_started

	# Diplomacy/War on actions

	### Trigger the following commands whenever a country send volunteers to another. ROOT is sender, FROM is receiver.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_send_volunteers

	### Trigger the following commands whenever a country recalls volunteers. FROM is country losing volunteers, ROOT is country recalling volunteers
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_recall_volunteers

	### Trigger the following commands whenever a country loses a border war. "Border war" refers to the state-based border wars enabled with set_border_war, represented with orange stripes over the state, rather than border wars that simulate combat between countries. The default scope is the state that lost the border war.
	## replace_scopes = { this = state root = country }
	## event_type = country
	on_border_war_lost

	### fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	### ROOT is attacker, FROM is defender.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_war_relation_added

	### Trigger the following commands whenever a country declares war. FROM is war target, ROOT is for the country who is declaring war
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_declare_war

	### Trigger the following commands whenever a country has just entered a state of war from initially being at peace. THIS is country that has just gotten into a war.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_war

	### Trigger the following commands whenever a country is no longer at war. THIS is country that is no longer at war.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_peace

	### Trigger the following commands whenever a country capitulates, in the middle of the process.
	### ROOT is capitulated country, FROM is winner. Several processes such as the deletion of units and transfer of equipment have already been executed by this point.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_capitulation

	### Trigger the following commands whenever a country capitulates, at the beginning of the process. ROOT is capitulated country, FROM is winner
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_capitulation_immediate

	### Trigger the following commands whenever a country that was previously capitulated changes its status to no longer having capitulated. ROOT is the country affected.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_uncapitulation

	### Trigger the following commands whenever a country is annexed. ROOT is winner, FROM gets annexed. For civil wars on_civil_war_end is also fired.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_annex

	### Trigger the following commands just before FROM gets annexed, meaning the country and everything it owns still exists. ROOT is winner, FROM gets annexed. It will also fire on_annex and on_civil_war_end
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_civil_war_end_before_annexation

	### Trigger the following commands whenever a civil war ends. ROOT is civil war winner, FROM gets annexed. This will also fire on_annex.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_civil_war_end

	### Trigger the following commands whenever a country is puppeted in a peace conference only. ROOT is the nation being puppeted, FROM is the overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_puppet

	### Trigger the following commands whenever a country is forcing government change in a peace conference only. ROOT is the nation having the government changed, FROM is the overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_force_government

	### Trigger the following commands whenever a country is liberated in a peace conference only. ROOT is the nation being liberated, FROM is the leader of the liberators.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_liberate

	### Trigger the following commands whenever a country is released. ROOT is free nation FROM is releaser.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_release_as_free

	### Trigger the following commands whenever puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory).
	### ROOT is the nation being released, FROM is the overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_release_as_puppet

	### Trigger the following commands whenever a country guarantees independence of another country. ROOT is the country which guarantees, FROM is the country that is guaranteed.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_guarantee

	### Trigger the following commands whenever a country accepts the request for military access. ROOT is the country which requested, FROM is the country that accepted.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_military_access

	### Trigger the following commands whenever a country accepts the offer for military access. ROOT is the country which offered, FROM is the country that accepted.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_offer_military_access

	### Trigger the following commands whenever a country accepts the call to war. ROOT is the country which called, FROM is the country that joined.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_call_allies

	### Trigger the following commands whenever a country joins a war of an ally. ROOT is the country which joined, FROM is the country whose war was joined.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_join_allies

	### Trigger the following commands whenever a country has their lend lease accepted. ROOT is the country that sent the lend lease, FROM is the country that accepted.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_lend_lease

	### Trigger the following commands whenever a country accepts a requested lend lease. ROOT is the country that accepted, FROM is the country that requested.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_incoming_lend_lease

	### Trigger the following commands whenever a country accepts sent expeditionary forces. ROOT is the country that sent, FROM is the country that accepted.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_send_expeditionary_force

	### Trigger the following commands whenever a country returns their expeditionary forces. ROOT is the owner of the forces, FROM is the country where the forces were sent.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_return_expeditionary_forces

	### Trigger the following commands whenever a country returns their expeditionary forces. ROOT is the owner of the forces, FROM is the country where the forces were sent.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_request_expeditionary_forces

	### Trigger the following commands whenever a country accepts the request for control of a state. ROOT is the requester, FROM is the country in control of the state.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_ask_for_state_control

	### Trigger the following commands whenever a country accepts being given control of a state. ROOT is the giver, FROM is the receiver.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_give_state_control

	### Trigger the following commands whenever a country accepts a conditional surrender. ROOT is sender of conditional surrender, FROM is the receiver.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_peace_proposal

	### Triggers actions on an attache being accepted. Default scope is sender, FROM = receiver
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_send_attache

	# Faction on actions

	### Trigger the following commands whenever a country create a faction. FROM is the one that joins the faction.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_create_faction

	### Trigger the following commands when a faction is formed.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_faction_formed

	### Trigger the following commands whenever a country joins a faction after being invited. FROM is the country invited, THIS and ROOT are the faction leader.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_offer_join_faction

	### Trigger the following commands for a faction leader whenever a country joins after they ask to do so. FROM is faction leader, ROOT and THIS are the country that joins.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_join_faction

	### Trigger the following commands whenever a country assumes leadership of a faction. ROOT is the new faction leader FROM is the old faction leader
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_assume_faction_leadership

	### Trigger the following commands whenever a country leaves a faction. FROM is the faction Leader, ROOT is the country leaving the faction
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_leave_faction

	# Autonomy on actions

	### Trigger the following commands when a country annex a subject. ROOT is the subject, FROM is the overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_subject_annexed

	### Trigger the following commands when a country grants freedom to a puppet. ROOT is the subject, FROM is the previous overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_subject_free

	### Trigger the following commands when the autonomy level of a puppet changes. ROOT is the subject, FROM is the overlord.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_subject_autonomy_level_change

	# Governments in Exile on actions

	### Trigger the following commands whenever a country becomes a government in exile. ROOT is the government in exile, FROM is the country that is hosting the government in exile.
	## replace_scopes = { this = country root = country }
	## event_type = country
	on_government_exiled

	### Trigger the following commands whenever a country that is hosting a government in exile has capitulated.
	### ROOT is the government in exile, FROM is the new country hosting the government in exile, FROM.FROM is the old country that was hosting the government in exile.
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_host_changed_from_capitulation

	### Trigger the following commands whenever a country has returned from governing in exile. ROOT is the government in exile, FROM is the country that was hosting the government in exile.
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_exile_government_reinstated

	# States on actions

	### Trigger the following commands when a state's controller changes. ROOT is new controller, FROM is old controller, FROM.FROM is state ID.
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_state_control_changed

	# War Goal on actions

	### Trigger the following commands whenever a country generates a wargoal. ROOT is the wargoal owner, FROM is the wargoal target
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_generate_wargoal

	### Trigger the following commands whenever the country is targeted by a wargoal under justification. FROM = target nation. Checked every day.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_justifying_wargoal_pulse

	### Trigger the following commands whenever a wargoal expire. FROM is the wargoal owner.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_wargoal_expire

	# Unit Leader on actions

	### Trigger the following commands when an army leader is created. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_unit_leader_created

	### Trigger the following commands on an army leader each day. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_army_leader_daily

	### Trigger the following commands whenever an army leader won a combat. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_army_leader_won_combat

	### Trigger the following commands whenever an army leader lost a combat. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_army_leader_lost_combat

	### Trigger the following commands when a leader gain a level. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_unit_leader_level_up

	### Trigger the following commands whenever a corps commander is promoted to a field marshal. FROM is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_army_leader_promoted

	### Triggers the following commands whenever an unit commander gets promoted to a general. FROM is unit, OWNER is owner country, ROOT is the unit leader.
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_unit_leader_promote_from_ranks_veteran

	### Triggers the following commands whenever an unit commander gets promoted to a general. FROM is unit, OWNER is owner country, ROOT is the unit leader
	## replace_scopes = { this = unit_leader root = unit_leader from = country }
	## event_type = unit_leader
	on_unit_leader_promote_from_ranks_green

	# Military on actions

	### Trigger the following commands whenever a country drops a nuke. ROOT is the country that launched the nuke, FROM is the nuked state.
	## replace_scopes = { this = country root = country from = state }
	## event_type = country
	on_nuke_drop

	### Triggers when a country's pride of the fleet is sunk. FROM is the killer country, ROOT is the country of that lost its pride of the fleet.
	## replace_scopes = { this = country root = country from = country }
	## event_type = country
	on_pride_of_the_fleet_sunk

	### Triggers the following commands whenever a sea invasion is made. THIS (default scope) is the invaded state, ROOT is the country that invades, FROM is the state where the invasion started
	## replace_scopes = { this = state root = country from = state }
	## event_type = country
	on_naval_invasion

	### Triggers the following commands whenever a landing occurs. THIS (default scope) is the invaded state, ROOT is the country that invades, FROM is the state where the invasion started
	## replace_scopes = { this = state root = country from = state }
	## event_type = country
	on_paradrop

	## replace_scopes = { this = state root = state from = country }
	## event_type = state
	on_units_paradropped_in_state

	### Triggers the following commands whenever receiving a history entry. ROOT is the unit.
	## replace_scopes = { root = unit }
	## event_type = scopeless
	on_add_history

	# Aces on actions

	### Trigger the following commands whenever an ace is created. FROM = Ace
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_ace_promoted

	### Trigger the following commands whenever an aces is killed. FROM = ace
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_ace_killed

	### Trigger the following commands whenever our aces died on accident. FROM = our ace died in accident.
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_ace_killed_on_accident

	### Trigger the following commands whenever non ace killed enemy ace. FROM = enemy ace.
	## replace_scopes = { this = country root = country from = any }
	## event_type = country
	on_non_ace_killed_other_ace

	### Trigger the following commands whenever an aces is killed by another ace. FROM = our ace, PREV = enemy ace, has killed FROM.
	## replace_scopes = { this = country root = country from = any prev = any }
	## event_type = country
	on_ace_killed_by_ace

	### Trigger the following commands whenever an aces is killed by another ace (surviving ace side). FROM = our ace, PREV = enemy ace, killed by FROM.
	## replace_scope = { this = country root = country from = any prev = any }
	## event_type = country
	on_ace_killed_other_ace

	### Trigger the following commands whenever two aces kill each other in air duel. FROM = our ace, PREV = enemy ace, has killed FROM.
	## replace_scope = { this = country root = country from = any prev = any }
	## event_type = country
	on_aces_killed_each_other

	# La Résistance on actions

	### Trigger the following commands whenever an operative completed. THIS - the operative, ROOT - the initiating country, FROM - the target country.
	## replace_scope = { this = operative root = country from = country }
	## event_type = operative_leader
	on_operation_completed

	### Trigger the following commands whenever an operative dies.
	### THIS - the operative, ROOT - the killer country (optional), FROM - the country the operative is operating for, FROM.FROM - operation state (will only be set if the operation has a specific selection_target).
	## replace_scope = { this = operative root = country from = country fromfrom = state }
	## event_type = operative_leader
	on_operative_detected_during_operation

	### Trigger the following commands whenever an operative performing an offensive mission in a country.
	### THIS - the operative, FROM - the country the operative was performing its mission in, ROOT - the country the operative is operating for.
	## replace_scope = { this = operative root = country from = country }
	## event_type = operative_leader
	on_operative_on_mission_spotted

	### Trigger the following commands whenever an operative is captured.
	### THIS - the operative, ROOT - the country the operative was performing its mission in, FROM - the country the operative is operating for.
	## replace_scope = { this = operative root = country from = country }
	## event_type = operative_leader
	on_operative_captured

	### Trigger the following commands whenever an operative is created.
	### THIS - the operative, FROM - the country the operative is created by.
	## replace_scope = { this = operative root = operative from = country }
	## event_type = operative_leader
	on_operative_created

	### Trigger the following commands whenever an operative dies.
	### THIS - the operative, ROOT - the killer country (optional), FROM - the country the operative is operating for
	## replace_scope = { this = operative root = country from = country }
	## event_type = operative_leader
	on_operative_death

	### Trigger the following commands whenever an operative is recruited.
	### THIS - the operative, FROM - the country the operative is created by.
	## replace_scope = { this = operative root = operative from = country }
	## event_type = operative_leader
	on_operative_recruited

	### Trigger the following commands whenever a country fully decrypts cipher of a target country.
	### THIS - the target country that its cipher is decrypted, FROM - the decrypter country.
	## replace_scope = { this = country root = country from = country }
	## event_type = country
	on_fully_decrypted_cipher

	### Trigger the following commands whenever a country activates its active cipher bonuses against a target.
	### THIS - the target country, FROM - the country that activates its bonuses.
	## replace_scope = { this = country root = country from = country }
	## event_type = country
	on_activated_active_decryption_bonuses

	# Military Industrial Organization on actions

	### Trigger the following commands whenever a MIO increases in size (levels up).
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_size_increased

	### Trigger the following commands whenever a MIO is assigned to technology research.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_design_team_assigned_to_tech

	### Trigger the following commands whenever a MIO is asigned to a variant.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_design_team_assigned_to_variant

	### Trigger the following commands whenever a MIO assigned to a production line.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_industrial_manufacturer_assigned

	### Currently does not work.
	### Trigger the following commands whenever a technology a MIO is assigned to is canceled.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_tech_research_cancelled

	### Currently does not work.
	### Trigger the following commands whenever a technology a MIO is assigned to is completed.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_tech_research_completed

	### Trigger the following commands whenever a MIO is unnasigned from a production line.
	### ROOT is the Military Industrial Organization, FROM is the owner of the MIO country
	## replace_scope = { this = military_industrial_organization root = military_industrial_organization from = country  }
	## event_type = scopeless
	on_mio_industrial_manufacturer_unassigned
}
